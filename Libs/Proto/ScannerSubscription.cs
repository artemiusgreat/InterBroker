// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ScannerSubscription.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from ScannerSubscription.proto</summary>
  public static partial class ScannerSubscriptionReflection {

    #region Descriptor
    /// <summary>File descriptor for ScannerSubscription.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScannerSubscriptionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlTY2FubmVyU3Vic2NyaXB0aW9uLnByb3RvEghwcm90b2J1ZiLtCgoTU2Nh",
            "bm5lclN1YnNjcmlwdGlvbhIZCgxudW1iZXJPZlJvd3MYASABKAVIAIgBARIX",
            "CgppbnN0cnVtZW50GAIgASgJSAGIAQESGQoMbG9jYXRpb25Db2RlGAMgASgJ",
            "SAKIAQESFQoIc2NhbkNvZGUYBCABKAlIA4gBARIXCgphYm92ZVByaWNlGAUg",
            "ASgBSASIAQESFwoKYmVsb3dQcmljZRgGIAEoAUgFiAEBEhgKC2Fib3ZlVm9s",
            "dW1lGAcgASgDSAaIAQESGwoObWFya2V0Q2FwQWJvdmUYCCABKAFIB4gBARIb",
            "Cg5tYXJrZXRDYXBCZWxvdxgJIAEoAUgIiAEBEh0KEG1vb2R5UmF0aW5nQWJv",
            "dmUYCiABKAlICYgBARIdChBtb29keVJhdGluZ0JlbG93GAsgASgJSAqIAQES",
            "GgoNc3BSYXRpbmdBYm92ZRgMIAEoCUgLiAEBEhoKDXNwUmF0aW5nQmVsb3cY",
            "DSABKAlIDIgBARIeChFtYXR1cml0eURhdGVBYm92ZRgOIAEoCUgNiAEBEh4K",
            "EW1hdHVyaXR5RGF0ZUJlbG93GA8gASgJSA6IAQESHAoPY291cG9uUmF0ZUFi",
            "b3ZlGBAgASgBSA+IAQESHAoPY291cG9uUmF0ZUJlbG93GBEgASgBSBCIAQES",
            "HwoSZXhjbHVkZUNvbnZlcnRpYmxlGBIgASgISBGIAQESJQoYYXZlcmFnZU9w",
            "dGlvblZvbHVtZUFib3ZlGBMgASgDSBKIAQESIAoTc2Nhbm5lclNldHRpbmdQ",
            "YWlycxgUIAEoCUgTiAEBEhwKD3N0b2NrVHlwZUZpbHRlchgVIAEoCUgUiAEB",
            "Em0KIHNjYW5uZXJTdWJzY3JpcHRpb25GaWx0ZXJPcHRpb25zGBYgAygLMkMu",
            "cHJvdG9idWYuU2Nhbm5lclN1YnNjcmlwdGlvbi5TY2FubmVyU3Vic2NyaXB0",
            "aW9uRmlsdGVyT3B0aW9uc0VudHJ5EmEKGnNjYW5uZXJTdWJzY3JpcHRpb25P",
            "cHRpb25zGBcgAygLMj0ucHJvdG9idWYuU2Nhbm5lclN1YnNjcmlwdGlvbi5T",
            "Y2FubmVyU3Vic2NyaXB0aW9uT3B0aW9uc0VudHJ5GkcKJVNjYW5uZXJTdWJz",
            "Y3JpcHRpb25GaWx0ZXJPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgJOgI4ARpBCh9TY2FubmVyU3Vic2NyaXB0aW9uT3B0aW9uc0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCDwoNX251bWJl",
            "ck9mUm93c0INCgtfaW5zdHJ1bWVudEIPCg1fbG9jYXRpb25Db2RlQgsKCV9z",
            "Y2FuQ29kZUINCgtfYWJvdmVQcmljZUINCgtfYmVsb3dQcmljZUIOCgxfYWJv",
            "dmVWb2x1bWVCEQoPX21hcmtldENhcEFib3ZlQhEKD19tYXJrZXRDYXBCZWxv",
            "d0ITChFfbW9vZHlSYXRpbmdBYm92ZUITChFfbW9vZHlSYXRpbmdCZWxvd0IQ",
            "Cg5fc3BSYXRpbmdBYm92ZUIQCg5fc3BSYXRpbmdCZWxvd0IUChJfbWF0dXJp",
            "dHlEYXRlQWJvdmVCFAoSX21hdHVyaXR5RGF0ZUJlbG93QhIKEF9jb3Vwb25S",
            "YXRlQWJvdmVCEgoQX2NvdXBvblJhdGVCZWxvd0IVChNfZXhjbHVkZUNvbnZl",
            "cnRpYmxlQhsKGV9hdmVyYWdlT3B0aW9uVm9sdW1lQWJvdmVCFgoUX3NjYW5u",
            "ZXJTZXR0aW5nUGFpcnNCEgoQX3N0b2NrVHlwZUZpbHRlckJDChZjb20uaWIu",
            "Y2xpZW50LnByb3RvYnVmQhhTY2FubmVyU3Vic2NyaXB0aW9uUHJvdG+qAg5J",
            "QkFwaS5wcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.ScannerSubscription), global::IBApi.protobuf.ScannerSubscription.Parser, new[]{ "NumberOfRows", "Instrument", "LocationCode", "ScanCode", "AbovePrice", "BelowPrice", "AboveVolume", "MarketCapAbove", "MarketCapBelow", "MoodyRatingAbove", "MoodyRatingBelow", "SpRatingAbove", "SpRatingBelow", "MaturityDateAbove", "MaturityDateBelow", "CouponRateAbove", "CouponRateBelow", "ExcludeConvertible", "AverageOptionVolumeAbove", "ScannerSettingPairs", "StockTypeFilter", "ScannerSubscriptionFilterOptions", "ScannerSubscriptionOptions" }, new[]{ "NumberOfRows", "Instrument", "LocationCode", "ScanCode", "AbovePrice", "BelowPrice", "AboveVolume", "MarketCapAbove", "MarketCapBelow", "MoodyRatingAbove", "MoodyRatingBelow", "SpRatingAbove", "SpRatingBelow", "MaturityDateAbove", "MaturityDateBelow", "CouponRateAbove", "CouponRateBelow", "ExcludeConvertible", "AverageOptionVolumeAbove", "ScannerSettingPairs", "StockTypeFilter" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ScannerSubscription : pb::IMessage<ScannerSubscription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScannerSubscription> _parser = new pb::MessageParser<ScannerSubscription>(() => new ScannerSubscription());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ScannerSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.ScannerSubscriptionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScannerSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScannerSubscription(ScannerSubscription other) : this() {
      _hasBits0 = other._hasBits0;
      numberOfRows_ = other.numberOfRows_;
      instrument_ = other.instrument_;
      locationCode_ = other.locationCode_;
      scanCode_ = other.scanCode_;
      abovePrice_ = other.abovePrice_;
      belowPrice_ = other.belowPrice_;
      aboveVolume_ = other.aboveVolume_;
      marketCapAbove_ = other.marketCapAbove_;
      marketCapBelow_ = other.marketCapBelow_;
      moodyRatingAbove_ = other.moodyRatingAbove_;
      moodyRatingBelow_ = other.moodyRatingBelow_;
      spRatingAbove_ = other.spRatingAbove_;
      spRatingBelow_ = other.spRatingBelow_;
      maturityDateAbove_ = other.maturityDateAbove_;
      maturityDateBelow_ = other.maturityDateBelow_;
      couponRateAbove_ = other.couponRateAbove_;
      couponRateBelow_ = other.couponRateBelow_;
      excludeConvertible_ = other.excludeConvertible_;
      averageOptionVolumeAbove_ = other.averageOptionVolumeAbove_;
      scannerSettingPairs_ = other.scannerSettingPairs_;
      stockTypeFilter_ = other.stockTypeFilter_;
      scannerSubscriptionFilterOptions_ = other.scannerSubscriptionFilterOptions_.Clone();
      scannerSubscriptionOptions_ = other.scannerSubscriptionOptions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScannerSubscription Clone() {
      return new ScannerSubscription(this);
    }

    /// <summary>Field number for the "numberOfRows" field.</summary>
    public const int NumberOfRowsFieldNumber = 1;
    private readonly static int NumberOfRowsDefaultValue = 0;

    private int numberOfRows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumberOfRows {
      get { if ((_hasBits0 & 1) != 0) { return numberOfRows_; } else { return NumberOfRowsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numberOfRows_ = value;
      }
    }
    /// <summary>Gets whether the "numberOfRows" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumberOfRows {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "numberOfRows" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumberOfRows() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 2;
    private readonly static string InstrumentDefaultValue = "";

    private string instrument_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Instrument {
      get { return instrument_ ?? InstrumentDefaultValue; }
      set {
        instrument_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "instrument" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInstrument {
      get { return instrument_ != null; }
    }
    /// <summary>Clears the value of the "instrument" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInstrument() {
      instrument_ = null;
    }

    /// <summary>Field number for the "locationCode" field.</summary>
    public const int LocationCodeFieldNumber = 3;
    private readonly static string LocationCodeDefaultValue = "";

    private string locationCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocationCode {
      get { return locationCode_ ?? LocationCodeDefaultValue; }
      set {
        locationCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "locationCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLocationCode {
      get { return locationCode_ != null; }
    }
    /// <summary>Clears the value of the "locationCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocationCode() {
      locationCode_ = null;
    }

    /// <summary>Field number for the "scanCode" field.</summary>
    public const int ScanCodeFieldNumber = 4;
    private readonly static string ScanCodeDefaultValue = "";

    private string scanCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScanCode {
      get { return scanCode_ ?? ScanCodeDefaultValue; }
      set {
        scanCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "scanCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScanCode {
      get { return scanCode_ != null; }
    }
    /// <summary>Clears the value of the "scanCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScanCode() {
      scanCode_ = null;
    }

    /// <summary>Field number for the "abovePrice" field.</summary>
    public const int AbovePriceFieldNumber = 5;
    private readonly static double AbovePriceDefaultValue = 0D;

    private double abovePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AbovePrice {
      get { if ((_hasBits0 & 2) != 0) { return abovePrice_; } else { return AbovePriceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        abovePrice_ = value;
      }
    }
    /// <summary>Gets whether the "abovePrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAbovePrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "abovePrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAbovePrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "belowPrice" field.</summary>
    public const int BelowPriceFieldNumber = 6;
    private readonly static double BelowPriceDefaultValue = 0D;

    private double belowPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BelowPrice {
      get { if ((_hasBits0 & 4) != 0) { return belowPrice_; } else { return BelowPriceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        belowPrice_ = value;
      }
    }
    /// <summary>Gets whether the "belowPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBelowPrice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "belowPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBelowPrice() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "aboveVolume" field.</summary>
    public const int AboveVolumeFieldNumber = 7;
    private readonly static long AboveVolumeDefaultValue = 0L;

    private long aboveVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AboveVolume {
      get { if ((_hasBits0 & 8) != 0) { return aboveVolume_; } else { return AboveVolumeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        aboveVolume_ = value;
      }
    }
    /// <summary>Gets whether the "aboveVolume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAboveVolume {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "aboveVolume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAboveVolume() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "marketCapAbove" field.</summary>
    public const int MarketCapAboveFieldNumber = 8;
    private readonly static double MarketCapAboveDefaultValue = 0D;

    private double marketCapAbove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MarketCapAbove {
      get { if ((_hasBits0 & 16) != 0) { return marketCapAbove_; } else { return MarketCapAboveDefaultValue; } }
      set {
        _hasBits0 |= 16;
        marketCapAbove_ = value;
      }
    }
    /// <summary>Gets whether the "marketCapAbove" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketCapAbove {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "marketCapAbove" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketCapAbove() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "marketCapBelow" field.</summary>
    public const int MarketCapBelowFieldNumber = 9;
    private readonly static double MarketCapBelowDefaultValue = 0D;

    private double marketCapBelow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MarketCapBelow {
      get { if ((_hasBits0 & 32) != 0) { return marketCapBelow_; } else { return MarketCapBelowDefaultValue; } }
      set {
        _hasBits0 |= 32;
        marketCapBelow_ = value;
      }
    }
    /// <summary>Gets whether the "marketCapBelow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketCapBelow {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "marketCapBelow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketCapBelow() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "moodyRatingAbove" field.</summary>
    public const int MoodyRatingAboveFieldNumber = 10;
    private readonly static string MoodyRatingAboveDefaultValue = "";

    private string moodyRatingAbove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MoodyRatingAbove {
      get { return moodyRatingAbove_ ?? MoodyRatingAboveDefaultValue; }
      set {
        moodyRatingAbove_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "moodyRatingAbove" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMoodyRatingAbove {
      get { return moodyRatingAbove_ != null; }
    }
    /// <summary>Clears the value of the "moodyRatingAbove" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMoodyRatingAbove() {
      moodyRatingAbove_ = null;
    }

    /// <summary>Field number for the "moodyRatingBelow" field.</summary>
    public const int MoodyRatingBelowFieldNumber = 11;
    private readonly static string MoodyRatingBelowDefaultValue = "";

    private string moodyRatingBelow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MoodyRatingBelow {
      get { return moodyRatingBelow_ ?? MoodyRatingBelowDefaultValue; }
      set {
        moodyRatingBelow_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "moodyRatingBelow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMoodyRatingBelow {
      get { return moodyRatingBelow_ != null; }
    }
    /// <summary>Clears the value of the "moodyRatingBelow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMoodyRatingBelow() {
      moodyRatingBelow_ = null;
    }

    /// <summary>Field number for the "spRatingAbove" field.</summary>
    public const int SpRatingAboveFieldNumber = 12;
    private readonly static string SpRatingAboveDefaultValue = "";

    private string spRatingAbove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpRatingAbove {
      get { return spRatingAbove_ ?? SpRatingAboveDefaultValue; }
      set {
        spRatingAbove_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "spRatingAbove" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpRatingAbove {
      get { return spRatingAbove_ != null; }
    }
    /// <summary>Clears the value of the "spRatingAbove" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpRatingAbove() {
      spRatingAbove_ = null;
    }

    /// <summary>Field number for the "spRatingBelow" field.</summary>
    public const int SpRatingBelowFieldNumber = 13;
    private readonly static string SpRatingBelowDefaultValue = "";

    private string spRatingBelow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpRatingBelow {
      get { return spRatingBelow_ ?? SpRatingBelowDefaultValue; }
      set {
        spRatingBelow_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "spRatingBelow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSpRatingBelow {
      get { return spRatingBelow_ != null; }
    }
    /// <summary>Clears the value of the "spRatingBelow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSpRatingBelow() {
      spRatingBelow_ = null;
    }

    /// <summary>Field number for the "maturityDateAbove" field.</summary>
    public const int MaturityDateAboveFieldNumber = 14;
    private readonly static string MaturityDateAboveDefaultValue = "";

    private string maturityDateAbove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaturityDateAbove {
      get { return maturityDateAbove_ ?? MaturityDateAboveDefaultValue; }
      set {
        maturityDateAbove_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "maturityDateAbove" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaturityDateAbove {
      get { return maturityDateAbove_ != null; }
    }
    /// <summary>Clears the value of the "maturityDateAbove" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaturityDateAbove() {
      maturityDateAbove_ = null;
    }

    /// <summary>Field number for the "maturityDateBelow" field.</summary>
    public const int MaturityDateBelowFieldNumber = 15;
    private readonly static string MaturityDateBelowDefaultValue = "";

    private string maturityDateBelow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaturityDateBelow {
      get { return maturityDateBelow_ ?? MaturityDateBelowDefaultValue; }
      set {
        maturityDateBelow_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "maturityDateBelow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaturityDateBelow {
      get { return maturityDateBelow_ != null; }
    }
    /// <summary>Clears the value of the "maturityDateBelow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaturityDateBelow() {
      maturityDateBelow_ = null;
    }

    /// <summary>Field number for the "couponRateAbove" field.</summary>
    public const int CouponRateAboveFieldNumber = 16;
    private readonly static double CouponRateAboveDefaultValue = 0D;

    private double couponRateAbove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CouponRateAbove {
      get { if ((_hasBits0 & 64) != 0) { return couponRateAbove_; } else { return CouponRateAboveDefaultValue; } }
      set {
        _hasBits0 |= 64;
        couponRateAbove_ = value;
      }
    }
    /// <summary>Gets whether the "couponRateAbove" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCouponRateAbove {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "couponRateAbove" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCouponRateAbove() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "couponRateBelow" field.</summary>
    public const int CouponRateBelowFieldNumber = 17;
    private readonly static double CouponRateBelowDefaultValue = 0D;

    private double couponRateBelow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CouponRateBelow {
      get { if ((_hasBits0 & 128) != 0) { return couponRateBelow_; } else { return CouponRateBelowDefaultValue; } }
      set {
        _hasBits0 |= 128;
        couponRateBelow_ = value;
      }
    }
    /// <summary>Gets whether the "couponRateBelow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCouponRateBelow {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "couponRateBelow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCouponRateBelow() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "excludeConvertible" field.</summary>
    public const int ExcludeConvertibleFieldNumber = 18;
    private readonly static bool ExcludeConvertibleDefaultValue = false;

    private bool excludeConvertible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ExcludeConvertible {
      get { if ((_hasBits0 & 256) != 0) { return excludeConvertible_; } else { return ExcludeConvertibleDefaultValue; } }
      set {
        _hasBits0 |= 256;
        excludeConvertible_ = value;
      }
    }
    /// <summary>Gets whether the "excludeConvertible" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExcludeConvertible {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "excludeConvertible" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExcludeConvertible() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "averageOptionVolumeAbove" field.</summary>
    public const int AverageOptionVolumeAboveFieldNumber = 19;
    private readonly static long AverageOptionVolumeAboveDefaultValue = 0L;

    private long averageOptionVolumeAbove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AverageOptionVolumeAbove {
      get { if ((_hasBits0 & 512) != 0) { return averageOptionVolumeAbove_; } else { return AverageOptionVolumeAboveDefaultValue; } }
      set {
        _hasBits0 |= 512;
        averageOptionVolumeAbove_ = value;
      }
    }
    /// <summary>Gets whether the "averageOptionVolumeAbove" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageOptionVolumeAbove {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "averageOptionVolumeAbove" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageOptionVolumeAbove() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "scannerSettingPairs" field.</summary>
    public const int ScannerSettingPairsFieldNumber = 20;
    private readonly static string ScannerSettingPairsDefaultValue = "";

    private string scannerSettingPairs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScannerSettingPairs {
      get { return scannerSettingPairs_ ?? ScannerSettingPairsDefaultValue; }
      set {
        scannerSettingPairs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "scannerSettingPairs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScannerSettingPairs {
      get { return scannerSettingPairs_ != null; }
    }
    /// <summary>Clears the value of the "scannerSettingPairs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScannerSettingPairs() {
      scannerSettingPairs_ = null;
    }

    /// <summary>Field number for the "stockTypeFilter" field.</summary>
    public const int StockTypeFilterFieldNumber = 21;
    private readonly static string StockTypeFilterDefaultValue = "";

    private string stockTypeFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StockTypeFilter {
      get { return stockTypeFilter_ ?? StockTypeFilterDefaultValue; }
      set {
        stockTypeFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "stockTypeFilter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStockTypeFilter {
      get { return stockTypeFilter_ != null; }
    }
    /// <summary>Clears the value of the "stockTypeFilter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStockTypeFilter() {
      stockTypeFilter_ = null;
    }

    /// <summary>Field number for the "scannerSubscriptionFilterOptions" field.</summary>
    public const int ScannerSubscriptionFilterOptionsFieldNumber = 22;
    private static readonly pbc::MapField<string, string>.Codec _map_scannerSubscriptionFilterOptions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 178);
    private readonly pbc::MapField<string, string> scannerSubscriptionFilterOptions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> ScannerSubscriptionFilterOptions {
      get { return scannerSubscriptionFilterOptions_; }
    }

    /// <summary>Field number for the "scannerSubscriptionOptions" field.</summary>
    public const int ScannerSubscriptionOptionsFieldNumber = 23;
    private static readonly pbc::MapField<string, string>.Codec _map_scannerSubscriptionOptions_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 186);
    private readonly pbc::MapField<string, string> scannerSubscriptionOptions_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> ScannerSubscriptionOptions {
      get { return scannerSubscriptionOptions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ScannerSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ScannerSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfRows != other.NumberOfRows) return false;
      if (Instrument != other.Instrument) return false;
      if (LocationCode != other.LocationCode) return false;
      if (ScanCode != other.ScanCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AbovePrice, other.AbovePrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BelowPrice, other.BelowPrice)) return false;
      if (AboveVolume != other.AboveVolume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarketCapAbove, other.MarketCapAbove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarketCapBelow, other.MarketCapBelow)) return false;
      if (MoodyRatingAbove != other.MoodyRatingAbove) return false;
      if (MoodyRatingBelow != other.MoodyRatingBelow) return false;
      if (SpRatingAbove != other.SpRatingAbove) return false;
      if (SpRatingBelow != other.SpRatingBelow) return false;
      if (MaturityDateAbove != other.MaturityDateAbove) return false;
      if (MaturityDateBelow != other.MaturityDateBelow) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CouponRateAbove, other.CouponRateAbove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CouponRateBelow, other.CouponRateBelow)) return false;
      if (ExcludeConvertible != other.ExcludeConvertible) return false;
      if (AverageOptionVolumeAbove != other.AverageOptionVolumeAbove) return false;
      if (ScannerSettingPairs != other.ScannerSettingPairs) return false;
      if (StockTypeFilter != other.StockTypeFilter) return false;
      if (!ScannerSubscriptionFilterOptions.Equals(other.ScannerSubscriptionFilterOptions)) return false;
      if (!ScannerSubscriptionOptions.Equals(other.ScannerSubscriptionOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNumberOfRows) hash ^= NumberOfRows.GetHashCode();
      if (HasInstrument) hash ^= Instrument.GetHashCode();
      if (HasLocationCode) hash ^= LocationCode.GetHashCode();
      if (HasScanCode) hash ^= ScanCode.GetHashCode();
      if (HasAbovePrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AbovePrice);
      if (HasBelowPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BelowPrice);
      if (HasAboveVolume) hash ^= AboveVolume.GetHashCode();
      if (HasMarketCapAbove) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarketCapAbove);
      if (HasMarketCapBelow) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarketCapBelow);
      if (HasMoodyRatingAbove) hash ^= MoodyRatingAbove.GetHashCode();
      if (HasMoodyRatingBelow) hash ^= MoodyRatingBelow.GetHashCode();
      if (HasSpRatingAbove) hash ^= SpRatingAbove.GetHashCode();
      if (HasSpRatingBelow) hash ^= SpRatingBelow.GetHashCode();
      if (HasMaturityDateAbove) hash ^= MaturityDateAbove.GetHashCode();
      if (HasMaturityDateBelow) hash ^= MaturityDateBelow.GetHashCode();
      if (HasCouponRateAbove) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CouponRateAbove);
      if (HasCouponRateBelow) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CouponRateBelow);
      if (HasExcludeConvertible) hash ^= ExcludeConvertible.GetHashCode();
      if (HasAverageOptionVolumeAbove) hash ^= AverageOptionVolumeAbove.GetHashCode();
      if (HasScannerSettingPairs) hash ^= ScannerSettingPairs.GetHashCode();
      if (HasStockTypeFilter) hash ^= StockTypeFilter.GetHashCode();
      hash ^= ScannerSubscriptionFilterOptions.GetHashCode();
      hash ^= ScannerSubscriptionOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNumberOfRows) {
        output.WriteRawTag(8);
        output.WriteInt32(NumberOfRows);
      }
      if (HasInstrument) {
        output.WriteRawTag(18);
        output.WriteString(Instrument);
      }
      if (HasLocationCode) {
        output.WriteRawTag(26);
        output.WriteString(LocationCode);
      }
      if (HasScanCode) {
        output.WriteRawTag(34);
        output.WriteString(ScanCode);
      }
      if (HasAbovePrice) {
        output.WriteRawTag(41);
        output.WriteDouble(AbovePrice);
      }
      if (HasBelowPrice) {
        output.WriteRawTag(49);
        output.WriteDouble(BelowPrice);
      }
      if (HasAboveVolume) {
        output.WriteRawTag(56);
        output.WriteInt64(AboveVolume);
      }
      if (HasMarketCapAbove) {
        output.WriteRawTag(65);
        output.WriteDouble(MarketCapAbove);
      }
      if (HasMarketCapBelow) {
        output.WriteRawTag(73);
        output.WriteDouble(MarketCapBelow);
      }
      if (HasMoodyRatingAbove) {
        output.WriteRawTag(82);
        output.WriteString(MoodyRatingAbove);
      }
      if (HasMoodyRatingBelow) {
        output.WriteRawTag(90);
        output.WriteString(MoodyRatingBelow);
      }
      if (HasSpRatingAbove) {
        output.WriteRawTag(98);
        output.WriteString(SpRatingAbove);
      }
      if (HasSpRatingBelow) {
        output.WriteRawTag(106);
        output.WriteString(SpRatingBelow);
      }
      if (HasMaturityDateAbove) {
        output.WriteRawTag(114);
        output.WriteString(MaturityDateAbove);
      }
      if (HasMaturityDateBelow) {
        output.WriteRawTag(122);
        output.WriteString(MaturityDateBelow);
      }
      if (HasCouponRateAbove) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(CouponRateAbove);
      }
      if (HasCouponRateBelow) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(CouponRateBelow);
      }
      if (HasExcludeConvertible) {
        output.WriteRawTag(144, 1);
        output.WriteBool(ExcludeConvertible);
      }
      if (HasAverageOptionVolumeAbove) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AverageOptionVolumeAbove);
      }
      if (HasScannerSettingPairs) {
        output.WriteRawTag(162, 1);
        output.WriteString(ScannerSettingPairs);
      }
      if (HasStockTypeFilter) {
        output.WriteRawTag(170, 1);
        output.WriteString(StockTypeFilter);
      }
      scannerSubscriptionFilterOptions_.WriteTo(output, _map_scannerSubscriptionFilterOptions_codec);
      scannerSubscriptionOptions_.WriteTo(output, _map_scannerSubscriptionOptions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNumberOfRows) {
        output.WriteRawTag(8);
        output.WriteInt32(NumberOfRows);
      }
      if (HasInstrument) {
        output.WriteRawTag(18);
        output.WriteString(Instrument);
      }
      if (HasLocationCode) {
        output.WriteRawTag(26);
        output.WriteString(LocationCode);
      }
      if (HasScanCode) {
        output.WriteRawTag(34);
        output.WriteString(ScanCode);
      }
      if (HasAbovePrice) {
        output.WriteRawTag(41);
        output.WriteDouble(AbovePrice);
      }
      if (HasBelowPrice) {
        output.WriteRawTag(49);
        output.WriteDouble(BelowPrice);
      }
      if (HasAboveVolume) {
        output.WriteRawTag(56);
        output.WriteInt64(AboveVolume);
      }
      if (HasMarketCapAbove) {
        output.WriteRawTag(65);
        output.WriteDouble(MarketCapAbove);
      }
      if (HasMarketCapBelow) {
        output.WriteRawTag(73);
        output.WriteDouble(MarketCapBelow);
      }
      if (HasMoodyRatingAbove) {
        output.WriteRawTag(82);
        output.WriteString(MoodyRatingAbove);
      }
      if (HasMoodyRatingBelow) {
        output.WriteRawTag(90);
        output.WriteString(MoodyRatingBelow);
      }
      if (HasSpRatingAbove) {
        output.WriteRawTag(98);
        output.WriteString(SpRatingAbove);
      }
      if (HasSpRatingBelow) {
        output.WriteRawTag(106);
        output.WriteString(SpRatingBelow);
      }
      if (HasMaturityDateAbove) {
        output.WriteRawTag(114);
        output.WriteString(MaturityDateAbove);
      }
      if (HasMaturityDateBelow) {
        output.WriteRawTag(122);
        output.WriteString(MaturityDateBelow);
      }
      if (HasCouponRateAbove) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(CouponRateAbove);
      }
      if (HasCouponRateBelow) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(CouponRateBelow);
      }
      if (HasExcludeConvertible) {
        output.WriteRawTag(144, 1);
        output.WriteBool(ExcludeConvertible);
      }
      if (HasAverageOptionVolumeAbove) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AverageOptionVolumeAbove);
      }
      if (HasScannerSettingPairs) {
        output.WriteRawTag(162, 1);
        output.WriteString(ScannerSettingPairs);
      }
      if (HasStockTypeFilter) {
        output.WriteRawTag(170, 1);
        output.WriteString(StockTypeFilter);
      }
      scannerSubscriptionFilterOptions_.WriteTo(ref output, _map_scannerSubscriptionFilterOptions_codec);
      scannerSubscriptionOptions_.WriteTo(ref output, _map_scannerSubscriptionOptions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasNumberOfRows) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfRows);
      }
      if (HasInstrument) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Instrument);
      }
      if (HasLocationCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationCode);
      }
      if (HasScanCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanCode);
      }
      if (HasAbovePrice) {
        size += 1 + 8;
      }
      if (HasBelowPrice) {
        size += 1 + 8;
      }
      if (HasAboveVolume) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AboveVolume);
      }
      if (HasMarketCapAbove) {
        size += 1 + 8;
      }
      if (HasMarketCapBelow) {
        size += 1 + 8;
      }
      if (HasMoodyRatingAbove) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MoodyRatingAbove);
      }
      if (HasMoodyRatingBelow) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MoodyRatingBelow);
      }
      if (HasSpRatingAbove) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpRatingAbove);
      }
      if (HasSpRatingBelow) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpRatingBelow);
      }
      if (HasMaturityDateAbove) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityDateAbove);
      }
      if (HasMaturityDateBelow) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaturityDateBelow);
      }
      if (HasCouponRateAbove) {
        size += 2 + 8;
      }
      if (HasCouponRateBelow) {
        size += 2 + 8;
      }
      if (HasExcludeConvertible) {
        size += 2 + 1;
      }
      if (HasAverageOptionVolumeAbove) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AverageOptionVolumeAbove);
      }
      if (HasScannerSettingPairs) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScannerSettingPairs);
      }
      if (HasStockTypeFilter) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StockTypeFilter);
      }
      size += scannerSubscriptionFilterOptions_.CalculateSize(_map_scannerSubscriptionFilterOptions_codec);
      size += scannerSubscriptionOptions_.CalculateSize(_map_scannerSubscriptionOptions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ScannerSubscription other) {
      if (other == null) {
        return;
      }
      if (other.HasNumberOfRows) {
        NumberOfRows = other.NumberOfRows;
      }
      if (other.HasInstrument) {
        Instrument = other.Instrument;
      }
      if (other.HasLocationCode) {
        LocationCode = other.LocationCode;
      }
      if (other.HasScanCode) {
        ScanCode = other.ScanCode;
      }
      if (other.HasAbovePrice) {
        AbovePrice = other.AbovePrice;
      }
      if (other.HasBelowPrice) {
        BelowPrice = other.BelowPrice;
      }
      if (other.HasAboveVolume) {
        AboveVolume = other.AboveVolume;
      }
      if (other.HasMarketCapAbove) {
        MarketCapAbove = other.MarketCapAbove;
      }
      if (other.HasMarketCapBelow) {
        MarketCapBelow = other.MarketCapBelow;
      }
      if (other.HasMoodyRatingAbove) {
        MoodyRatingAbove = other.MoodyRatingAbove;
      }
      if (other.HasMoodyRatingBelow) {
        MoodyRatingBelow = other.MoodyRatingBelow;
      }
      if (other.HasSpRatingAbove) {
        SpRatingAbove = other.SpRatingAbove;
      }
      if (other.HasSpRatingBelow) {
        SpRatingBelow = other.SpRatingBelow;
      }
      if (other.HasMaturityDateAbove) {
        MaturityDateAbove = other.MaturityDateAbove;
      }
      if (other.HasMaturityDateBelow) {
        MaturityDateBelow = other.MaturityDateBelow;
      }
      if (other.HasCouponRateAbove) {
        CouponRateAbove = other.CouponRateAbove;
      }
      if (other.HasCouponRateBelow) {
        CouponRateBelow = other.CouponRateBelow;
      }
      if (other.HasExcludeConvertible) {
        ExcludeConvertible = other.ExcludeConvertible;
      }
      if (other.HasAverageOptionVolumeAbove) {
        AverageOptionVolumeAbove = other.AverageOptionVolumeAbove;
      }
      if (other.HasScannerSettingPairs) {
        ScannerSettingPairs = other.ScannerSettingPairs;
      }
      if (other.HasStockTypeFilter) {
        StockTypeFilter = other.StockTypeFilter;
      }
      scannerSubscriptionFilterOptions_.MergeFrom(other.scannerSubscriptionFilterOptions_);
      scannerSubscriptionOptions_.MergeFrom(other.scannerSubscriptionOptions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumberOfRows = input.ReadInt32();
            break;
          }
          case 18: {
            Instrument = input.ReadString();
            break;
          }
          case 26: {
            LocationCode = input.ReadString();
            break;
          }
          case 34: {
            ScanCode = input.ReadString();
            break;
          }
          case 41: {
            AbovePrice = input.ReadDouble();
            break;
          }
          case 49: {
            BelowPrice = input.ReadDouble();
            break;
          }
          case 56: {
            AboveVolume = input.ReadInt64();
            break;
          }
          case 65: {
            MarketCapAbove = input.ReadDouble();
            break;
          }
          case 73: {
            MarketCapBelow = input.ReadDouble();
            break;
          }
          case 82: {
            MoodyRatingAbove = input.ReadString();
            break;
          }
          case 90: {
            MoodyRatingBelow = input.ReadString();
            break;
          }
          case 98: {
            SpRatingAbove = input.ReadString();
            break;
          }
          case 106: {
            SpRatingBelow = input.ReadString();
            break;
          }
          case 114: {
            MaturityDateAbove = input.ReadString();
            break;
          }
          case 122: {
            MaturityDateBelow = input.ReadString();
            break;
          }
          case 129: {
            CouponRateAbove = input.ReadDouble();
            break;
          }
          case 137: {
            CouponRateBelow = input.ReadDouble();
            break;
          }
          case 144: {
            ExcludeConvertible = input.ReadBool();
            break;
          }
          case 152: {
            AverageOptionVolumeAbove = input.ReadInt64();
            break;
          }
          case 162: {
            ScannerSettingPairs = input.ReadString();
            break;
          }
          case 170: {
            StockTypeFilter = input.ReadString();
            break;
          }
          case 178: {
            scannerSubscriptionFilterOptions_.AddEntriesFrom(input, _map_scannerSubscriptionFilterOptions_codec);
            break;
          }
          case 186: {
            scannerSubscriptionOptions_.AddEntriesFrom(input, _map_scannerSubscriptionOptions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NumberOfRows = input.ReadInt32();
            break;
          }
          case 18: {
            Instrument = input.ReadString();
            break;
          }
          case 26: {
            LocationCode = input.ReadString();
            break;
          }
          case 34: {
            ScanCode = input.ReadString();
            break;
          }
          case 41: {
            AbovePrice = input.ReadDouble();
            break;
          }
          case 49: {
            BelowPrice = input.ReadDouble();
            break;
          }
          case 56: {
            AboveVolume = input.ReadInt64();
            break;
          }
          case 65: {
            MarketCapAbove = input.ReadDouble();
            break;
          }
          case 73: {
            MarketCapBelow = input.ReadDouble();
            break;
          }
          case 82: {
            MoodyRatingAbove = input.ReadString();
            break;
          }
          case 90: {
            MoodyRatingBelow = input.ReadString();
            break;
          }
          case 98: {
            SpRatingAbove = input.ReadString();
            break;
          }
          case 106: {
            SpRatingBelow = input.ReadString();
            break;
          }
          case 114: {
            MaturityDateAbove = input.ReadString();
            break;
          }
          case 122: {
            MaturityDateBelow = input.ReadString();
            break;
          }
          case 129: {
            CouponRateAbove = input.ReadDouble();
            break;
          }
          case 137: {
            CouponRateBelow = input.ReadDouble();
            break;
          }
          case 144: {
            ExcludeConvertible = input.ReadBool();
            break;
          }
          case 152: {
            AverageOptionVolumeAbove = input.ReadInt64();
            break;
          }
          case 162: {
            ScannerSettingPairs = input.ReadString();
            break;
          }
          case 170: {
            StockTypeFilter = input.ReadString();
            break;
          }
          case 178: {
            scannerSubscriptionFilterOptions_.AddEntriesFrom(ref input, _map_scannerSubscriptionFilterOptions_codec);
            break;
          }
          case 186: {
            scannerSubscriptionOptions_.AddEntriesFrom(ref input, _map_scannerSubscriptionOptions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
