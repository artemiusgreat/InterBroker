// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: HistoricalDataBar.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from HistoricalDataBar.proto</summary>
  public static partial class HistoricalDataBarReflection {

    #region Descriptor
    /// <summary>File descriptor for HistoricalDataBar.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HistoricalDataBarReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdIaXN0b3JpY2FsRGF0YUJhci5wcm90bxIIcHJvdG9idWYi/QEKEUhpc3Rv",
            "cmljYWxEYXRhQmFyEhEKBGRhdGUYASABKAlIAIgBARIRCgRvcGVuGAIgASgB",
            "SAGIAQESEQoEaGlnaBgDIAEoAUgCiAEBEhAKA2xvdxgEIAEoAUgDiAEBEhIK",
            "BWNsb3NlGAUgASgBSASIAQESEwoGdm9sdW1lGAYgASgJSAWIAQESEAoDV0FQ",
            "GAcgASgJSAaIAQESFQoIYmFyQ291bnQYCCABKAVIB4gBAUIHCgVfZGF0ZUIH",
            "CgVfb3BlbkIHCgVfaGlnaEIGCgRfbG93QggKBl9jbG9zZUIJCgdfdm9sdW1l",
            "QgYKBF9XQVBCCwoJX2JhckNvdW50QkEKFmNvbS5pYi5jbGllbnQucHJvdG9i",
            "dWZCFkhpc3RvcmljYWxEYXRhQmFyUHJvdG+qAg5JQkFwaS5wcm90b2J1ZmIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.HistoricalDataBar), global::IBApi.protobuf.HistoricalDataBar.Parser, new[]{ "Date", "Open", "High", "Low", "Close", "Volume", "WAP", "BarCount" }, new[]{ "Date", "Open", "High", "Low", "Close", "Volume", "WAP", "BarCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class HistoricalDataBar : pb::IMessage<HistoricalDataBar>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HistoricalDataBar> _parser = new pb::MessageParser<HistoricalDataBar>(() => new HistoricalDataBar());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HistoricalDataBar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.HistoricalDataBarReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HistoricalDataBar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HistoricalDataBar(HistoricalDataBar other) : this() {
      _hasBits0 = other._hasBits0;
      date_ = other.date_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      volume_ = other.volume_;
      wAP_ = other.wAP_;
      barCount_ = other.barCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HistoricalDataBar Clone() {
      return new HistoricalDataBar(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private readonly static string DateDefaultValue = "";

    private string date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Date {
      get { return date_ ?? DateDefaultValue; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "date" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDate {
      get { return date_ != null; }
    }
    /// <summary>Clears the value of the "date" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDate() {
      date_ = null;
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private readonly static double OpenDefaultValue = 0D;

    private double open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Open {
      get { if ((_hasBits0 & 1) != 0) { return open_; } else { return OpenDefaultValue; } }
      set {
        _hasBits0 |= 1;
        open_ = value;
      }
    }
    /// <summary>Gets whether the "open" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpen {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "open" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpen() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 3;
    private readonly static double HighDefaultValue = 0D;

    private double high_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double High {
      get { if ((_hasBits0 & 2) != 0) { return high_; } else { return HighDefaultValue; } }
      set {
        _hasBits0 |= 2;
        high_ = value;
      }
    }
    /// <summary>Gets whether the "high" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHigh {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "high" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHigh() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 4;
    private readonly static double LowDefaultValue = 0D;

    private double low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Low {
      get { if ((_hasBits0 & 4) != 0) { return low_; } else { return LowDefaultValue; } }
      set {
        _hasBits0 |= 4;
        low_ = value;
      }
    }
    /// <summary>Gets whether the "low" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLow {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "low" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLow() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 5;
    private readonly static double CloseDefaultValue = 0D;

    private double close_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Close {
      get { if ((_hasBits0 & 8) != 0) { return close_; } else { return CloseDefaultValue; } }
      set {
        _hasBits0 |= 8;
        close_ = value;
      }
    }
    /// <summary>Gets whether the "close" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClose {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "close" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClose() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private readonly static string VolumeDefaultValue = "";

    private string volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Volume {
      get { return volume_ ?? VolumeDefaultValue; }
      set {
        volume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolume {
      get { return volume_ != null; }
    }
    /// <summary>Clears the value of the "volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolume() {
      volume_ = null;
    }

    /// <summary>Field number for the "WAP" field.</summary>
    public const int WAPFieldNumber = 7;
    private readonly static string WAPDefaultValue = "";

    private string wAP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WAP {
      get { return wAP_ ?? WAPDefaultValue; }
      set {
        wAP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "WAP" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWAP {
      get { return wAP_ != null; }
    }
    /// <summary>Clears the value of the "WAP" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWAP() {
      wAP_ = null;
    }

    /// <summary>Field number for the "barCount" field.</summary>
    public const int BarCountFieldNumber = 8;
    private readonly static int BarCountDefaultValue = 0;

    private int barCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BarCount {
      get { if ((_hasBits0 & 16) != 0) { return barCount_; } else { return BarCountDefaultValue; } }
      set {
        _hasBits0 |= 16;
        barCount_ = value;
      }
    }
    /// <summary>Gets whether the "barCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBarCount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "barCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBarCount() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HistoricalDataBar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HistoricalDataBar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Date != other.Date) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Open, other.Open)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(High, other.High)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Low, other.Low)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Close, other.Close)) return false;
      if (Volume != other.Volume) return false;
      if (WAP != other.WAP) return false;
      if (BarCount != other.BarCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDate) hash ^= Date.GetHashCode();
      if (HasOpen) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Open);
      if (HasHigh) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(High);
      if (HasLow) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Low);
      if (HasClose) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Close);
      if (HasVolume) hash ^= Volume.GetHashCode();
      if (HasWAP) hash ^= WAP.GetHashCode();
      if (HasBarCount) hash ^= BarCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDate) {
        output.WriteRawTag(10);
        output.WriteString(Date);
      }
      if (HasOpen) {
        output.WriteRawTag(17);
        output.WriteDouble(Open);
      }
      if (HasHigh) {
        output.WriteRawTag(25);
        output.WriteDouble(High);
      }
      if (HasLow) {
        output.WriteRawTag(33);
        output.WriteDouble(Low);
      }
      if (HasClose) {
        output.WriteRawTag(41);
        output.WriteDouble(Close);
      }
      if (HasVolume) {
        output.WriteRawTag(50);
        output.WriteString(Volume);
      }
      if (HasWAP) {
        output.WriteRawTag(58);
        output.WriteString(WAP);
      }
      if (HasBarCount) {
        output.WriteRawTag(64);
        output.WriteInt32(BarCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDate) {
        output.WriteRawTag(10);
        output.WriteString(Date);
      }
      if (HasOpen) {
        output.WriteRawTag(17);
        output.WriteDouble(Open);
      }
      if (HasHigh) {
        output.WriteRawTag(25);
        output.WriteDouble(High);
      }
      if (HasLow) {
        output.WriteRawTag(33);
        output.WriteDouble(Low);
      }
      if (HasClose) {
        output.WriteRawTag(41);
        output.WriteDouble(Close);
      }
      if (HasVolume) {
        output.WriteRawTag(50);
        output.WriteString(Volume);
      }
      if (HasWAP) {
        output.WriteRawTag(58);
        output.WriteString(WAP);
      }
      if (HasBarCount) {
        output.WriteRawTag(64);
        output.WriteInt32(BarCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDate) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (HasOpen) {
        size += 1 + 8;
      }
      if (HasHigh) {
        size += 1 + 8;
      }
      if (HasLow) {
        size += 1 + 8;
      }
      if (HasClose) {
        size += 1 + 8;
      }
      if (HasVolume) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Volume);
      }
      if (HasWAP) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WAP);
      }
      if (HasBarCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BarCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HistoricalDataBar other) {
      if (other == null) {
        return;
      }
      if (other.HasDate) {
        Date = other.Date;
      }
      if (other.HasOpen) {
        Open = other.Open;
      }
      if (other.HasHigh) {
        High = other.High;
      }
      if (other.HasLow) {
        Low = other.Low;
      }
      if (other.HasClose) {
        Close = other.Close;
      }
      if (other.HasVolume) {
        Volume = other.Volume;
      }
      if (other.HasWAP) {
        WAP = other.WAP;
      }
      if (other.HasBarCount) {
        BarCount = other.BarCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Date = input.ReadString();
            break;
          }
          case 17: {
            Open = input.ReadDouble();
            break;
          }
          case 25: {
            High = input.ReadDouble();
            break;
          }
          case 33: {
            Low = input.ReadDouble();
            break;
          }
          case 41: {
            Close = input.ReadDouble();
            break;
          }
          case 50: {
            Volume = input.ReadString();
            break;
          }
          case 58: {
            WAP = input.ReadString();
            break;
          }
          case 64: {
            BarCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Date = input.ReadString();
            break;
          }
          case 17: {
            Open = input.ReadDouble();
            break;
          }
          case 25: {
            High = input.ReadDouble();
            break;
          }
          case 33: {
            Low = input.ReadDouble();
            break;
          }
          case 41: {
            Close = input.ReadDouble();
            break;
          }
          case 50: {
            Volume = input.ReadString();
            break;
          }
          case 58: {
            WAP = input.ReadString();
            break;
          }
          case 64: {
            BarCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
