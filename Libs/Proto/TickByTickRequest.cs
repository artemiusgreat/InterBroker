// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TickByTickRequest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from TickByTickRequest.proto</summary>
  public static partial class TickByTickRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for TickByTickRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TickByTickRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdUaWNrQnlUaWNrUmVxdWVzdC5wcm90bxIIcHJvdG9idWYaDkNvbnRyYWN0",
            "LnByb3RvIuMBChFUaWNrQnlUaWNrUmVxdWVzdBISCgVyZXFJZBgBIAEoBUgA",
            "iAEBEikKCGNvbnRyYWN0GAIgASgLMhIucHJvdG9idWYuQ29udHJhY3RIAYgB",
            "ARIVCgh0aWNrVHlwZRgDIAEoCUgCiAEBEhoKDW51bWJlck9mVGlja3MYBCAB",
            "KAVIA4gBARIXCgppZ25vcmVTaXplGAUgASgISASIAQFCCAoGX3JlcUlkQgsK",
            "CV9jb250cmFjdEILCglfdGlja1R5cGVCEAoOX251bWJlck9mVGlja3NCDQoL",
            "X2lnbm9yZVNpemVCQQoWY29tLmliLmNsaWVudC5wcm90b2J1ZkIWVGlja0J5",
            "VGlja1JlcXVlc3RQcm90b6oCDklCQXBpLnByb3RvYnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IBApi.protobuf.ContractReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.TickByTickRequest), global::IBApi.protobuf.TickByTickRequest.Parser, new[]{ "ReqId", "Contract", "TickType", "NumberOfTicks", "IgnoreSize" }, new[]{ "ReqId", "Contract", "TickType", "NumberOfTicks", "IgnoreSize" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TickByTickRequest : pb::IMessage<TickByTickRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TickByTickRequest> _parser = new pb::MessageParser<TickByTickRequest>(() => new TickByTickRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TickByTickRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.TickByTickRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickByTickRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickByTickRequest(TickByTickRequest other) : this() {
      _hasBits0 = other._hasBits0;
      reqId_ = other.reqId_;
      contract_ = other.contract_ != null ? other.contract_.Clone() : null;
      tickType_ = other.tickType_;
      numberOfTicks_ = other.numberOfTicks_;
      ignoreSize_ = other.ignoreSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TickByTickRequest Clone() {
      return new TickByTickRequest(this);
    }

    /// <summary>Field number for the "reqId" field.</summary>
    public const int ReqIdFieldNumber = 1;
    private readonly static int ReqIdDefaultValue = 0;

    private int reqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReqId {
      get { if ((_hasBits0 & 1) != 0) { return reqId_; } else { return ReqIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reqId_ = value;
      }
    }
    /// <summary>Gets whether the "reqId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReqId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reqId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReqId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "contract" field.</summary>
    public const int ContractFieldNumber = 2;
    private global::IBApi.protobuf.ProtoContract contract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::IBApi.protobuf.ProtoContract Contract {
      get { return contract_; }
      set {
        contract_ = value;
      }
    }

    /// <summary>Field number for the "tickType" field.</summary>
    public const int TickTypeFieldNumber = 3;
    private readonly static string TickTypeDefaultValue = "";

    private string tickType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TickType {
      get { return tickType_ ?? TickTypeDefaultValue; }
      set {
        tickType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tickType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTickType {
      get { return tickType_ != null; }
    }
    /// <summary>Clears the value of the "tickType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTickType() {
      tickType_ = null;
    }

    /// <summary>Field number for the "numberOfTicks" field.</summary>
    public const int NumberOfTicksFieldNumber = 4;
    private readonly static int NumberOfTicksDefaultValue = 0;

    private int numberOfTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumberOfTicks {
      get { if ((_hasBits0 & 2) != 0) { return numberOfTicks_; } else { return NumberOfTicksDefaultValue; } }
      set {
        _hasBits0 |= 2;
        numberOfTicks_ = value;
      }
    }
    /// <summary>Gets whether the "numberOfTicks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumberOfTicks {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "numberOfTicks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumberOfTicks() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ignoreSize" field.</summary>
    public const int IgnoreSizeFieldNumber = 5;
    private readonly static bool IgnoreSizeDefaultValue = false;

    private bool ignoreSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreSize {
      get { if ((_hasBits0 & 4) != 0) { return ignoreSize_; } else { return IgnoreSizeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ignoreSize_ = value;
      }
    }
    /// <summary>Gets whether the "ignoreSize" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIgnoreSize {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ignoreSize" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIgnoreSize() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TickByTickRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TickByTickRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqId != other.ReqId) return false;
      if (!object.Equals(Contract, other.Contract)) return false;
      if (TickType != other.TickType) return false;
      if (NumberOfTicks != other.NumberOfTicks) return false;
      if (IgnoreSize != other.IgnoreSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReqId) hash ^= ReqId.GetHashCode();
      if (contract_ != null) hash ^= Contract.GetHashCode();
      if (HasTickType) hash ^= TickType.GetHashCode();
      if (HasNumberOfTicks) hash ^= NumberOfTicks.GetHashCode();
      if (HasIgnoreSize) hash ^= IgnoreSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasReqId) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqId);
      }
      if (contract_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contract);
      }
      if (HasTickType) {
        output.WriteRawTag(26);
        output.WriteString(TickType);
      }
      if (HasNumberOfTicks) {
        output.WriteRawTag(32);
        output.WriteInt32(NumberOfTicks);
      }
      if (HasIgnoreSize) {
        output.WriteRawTag(40);
        output.WriteBool(IgnoreSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasReqId) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqId);
      }
      if (contract_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contract);
      }
      if (HasTickType) {
        output.WriteRawTag(26);
        output.WriteString(TickType);
      }
      if (HasNumberOfTicks) {
        output.WriteRawTag(32);
        output.WriteInt32(NumberOfTicks);
      }
      if (HasIgnoreSize) {
        output.WriteRawTag(40);
        output.WriteBool(IgnoreSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasReqId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqId);
      }
      if (contract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
      }
      if (HasTickType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TickType);
      }
      if (HasNumberOfTicks) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfTicks);
      }
      if (HasIgnoreSize) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TickByTickRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasReqId) {
        ReqId = other.ReqId;
      }
      if (other.contract_ != null) {
        if (contract_ == null) {
          Contract = new global::IBApi.protobuf.ProtoContract();
        }
        Contract.MergeFrom(other.Contract);
      }
      if (other.HasTickType) {
        TickType = other.TickType;
      }
      if (other.HasNumberOfTicks) {
        NumberOfTicks = other.NumberOfTicks;
      }
      if (other.HasIgnoreSize) {
        IgnoreSize = other.IgnoreSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqId = input.ReadInt32();
            break;
          }
          case 18: {
            if (contract_ == null) {
              Contract = new global::IBApi.protobuf.Contract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 26: {
            TickType = input.ReadString();
            break;
          }
          case 32: {
            NumberOfTicks = input.ReadInt32();
            break;
          }
          case 40: {
            IgnoreSize = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReqId = input.ReadInt32();
            break;
          }
          case 18: {
            if (contract_ == null) {
              Contract = new global::IBApi.protobuf.ProtoContract();
            }
            input.ReadMessage(Contract);
            break;
          }
          case 26: {
            TickType = input.ReadString();
            break;
          }
          case 32: {
            NumberOfTicks = input.ReadInt32();
            break;
          }
          case 40: {
            IgnoreSize = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
