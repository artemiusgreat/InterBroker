// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CommissionAndFeesReport.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IBApi.protobuf {

  /// <summary>Holder for reflection information generated from CommissionAndFeesReport.proto</summary>
  public static partial class CommissionAndFeesReportReflection {

    #region Descriptor
    /// <summary>File descriptor for CommissionAndFeesReport.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommissionAndFeesReportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Db21taXNzaW9uQW5kRmVlc1JlcG9ydC5wcm90bxIIcHJvdG9idWYinQIK",
            "F0NvbW1pc3Npb25BbmRGZWVzUmVwb3J0EhMKBmV4ZWNJZBgBIAEoCUgAiAEB",
            "Eh4KEWNvbW1pc3Npb25BbmRGZWVzGAIgASgBSAGIAQESFQoIY3VycmVuY3kY",
            "AyABKAlIAogBARIYCgtyZWFsaXplZFBOTBgEIAEoAUgDiAEBEhYKCWJvbmRZ",
            "aWVsZBgFIAEoAUgEiAEBEiAKE3lpZWxkUmVkZW1wdGlvbkRhdGUYBiABKAlI",
            "BYgBAUIJCgdfZXhlY0lkQhQKEl9jb21taXNzaW9uQW5kRmVlc0ILCglfY3Vy",
            "cmVuY3lCDgoMX3JlYWxpemVkUE5MQgwKCl9ib25kWWllbGRCFgoUX3lpZWxk",
            "UmVkZW1wdGlvbkRhdGVCRwoWY29tLmliLmNsaWVudC5wcm90b2J1ZkIcQ29t",
            "bWlzc2lvbkFuZEZlZXNSZXBvcnRQcm90b6oCDklCQXBpLnByb3RvYnVmYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IBApi.protobuf.CommissionAndFeesReport), global::IBApi.protobuf.CommissionAndFeesReport.Parser, new[]{ "ExecId", "CommissionAndFees", "Currency", "RealizedPNL", "BondYield", "YieldRedemptionDate" }, new[]{ "ExecId", "CommissionAndFees", "Currency", "RealizedPNL", "BondYield", "YieldRedemptionDate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CommissionAndFeesReport : pb::IMessage<CommissionAndFeesReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommissionAndFeesReport> _parser = new pb::MessageParser<CommissionAndFeesReport>(() => new CommissionAndFeesReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CommissionAndFeesReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IBApi.protobuf.CommissionAndFeesReportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommissionAndFeesReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommissionAndFeesReport(CommissionAndFeesReport other) : this() {
      _hasBits0 = other._hasBits0;
      execId_ = other.execId_;
      commissionAndFees_ = other.commissionAndFees_;
      currency_ = other.currency_;
      realizedPNL_ = other.realizedPNL_;
      bondYield_ = other.bondYield_;
      yieldRedemptionDate_ = other.yieldRedemptionDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommissionAndFeesReport Clone() {
      return new CommissionAndFeesReport(this);
    }

    /// <summary>Field number for the "execId" field.</summary>
    public const int ExecIdFieldNumber = 1;
    private readonly static string ExecIdDefaultValue = "";

    private string execId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecId {
      get { return execId_ ?? ExecIdDefaultValue; }
      set {
        execId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "execId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExecId {
      get { return execId_ != null; }
    }
    /// <summary>Clears the value of the "execId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExecId() {
      execId_ = null;
    }

    /// <summary>Field number for the "commissionAndFees" field.</summary>
    public const int CommissionAndFeesFieldNumber = 2;
    private readonly static double CommissionAndFeesDefaultValue = 0D;

    private double commissionAndFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CommissionAndFees {
      get { if ((_hasBits0 & 1) != 0) { return commissionAndFees_; } else { return CommissionAndFeesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        commissionAndFees_ = value;
      }
    }
    /// <summary>Gets whether the "commissionAndFees" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCommissionAndFees {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "commissionAndFees" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCommissionAndFees() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private readonly static string CurrencyDefaultValue = "";

    private string currency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_ ?? CurrencyDefaultValue; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "currency" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrency {
      get { return currency_ != null; }
    }
    /// <summary>Clears the value of the "currency" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrency() {
      currency_ = null;
    }

    /// <summary>Field number for the "realizedPNL" field.</summary>
    public const int RealizedPNLFieldNumber = 4;
    private readonly static double RealizedPNLDefaultValue = 0D;

    private double realizedPNL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RealizedPNL {
      get { if ((_hasBits0 & 2) != 0) { return realizedPNL_; } else { return RealizedPNLDefaultValue; } }
      set {
        _hasBits0 |= 2;
        realizedPNL_ = value;
      }
    }
    /// <summary>Gets whether the "realizedPNL" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRealizedPNL {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "realizedPNL" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRealizedPNL() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bondYield" field.</summary>
    public const int BondYieldFieldNumber = 5;
    private readonly static double BondYieldDefaultValue = 0D;

    private double bondYield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BondYield {
      get { if ((_hasBits0 & 4) != 0) { return bondYield_; } else { return BondYieldDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bondYield_ = value;
      }
    }
    /// <summary>Gets whether the "bondYield" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBondYield {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bondYield" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBondYield() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "yieldRedemptionDate" field.</summary>
    public const int YieldRedemptionDateFieldNumber = 6;
    private readonly static string YieldRedemptionDateDefaultValue = "";

    private string yieldRedemptionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string YieldRedemptionDate {
      get { return yieldRedemptionDate_ ?? YieldRedemptionDateDefaultValue; }
      set {
        yieldRedemptionDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "yieldRedemptionDate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYieldRedemptionDate {
      get { return yieldRedemptionDate_ != null; }
    }
    /// <summary>Clears the value of the "yieldRedemptionDate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYieldRedemptionDate() {
      yieldRedemptionDate_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CommissionAndFeesReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CommissionAndFeesReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExecId != other.ExecId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CommissionAndFees, other.CommissionAndFees)) return false;
      if (Currency != other.Currency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RealizedPNL, other.RealizedPNL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BondYield, other.BondYield)) return false;
      if (YieldRedemptionDate != other.YieldRedemptionDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExecId) hash ^= ExecId.GetHashCode();
      if (HasCommissionAndFees) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CommissionAndFees);
      if (HasCurrency) hash ^= Currency.GetHashCode();
      if (HasRealizedPNL) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RealizedPNL);
      if (HasBondYield) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BondYield);
      if (HasYieldRedemptionDate) hash ^= YieldRedemptionDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasExecId) {
        output.WriteRawTag(10);
        output.WriteString(ExecId);
      }
      if (HasCommissionAndFees) {
        output.WriteRawTag(17);
        output.WriteDouble(CommissionAndFees);
      }
      if (HasCurrency) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (HasRealizedPNL) {
        output.WriteRawTag(33);
        output.WriteDouble(RealizedPNL);
      }
      if (HasBondYield) {
        output.WriteRawTag(41);
        output.WriteDouble(BondYield);
      }
      if (HasYieldRedemptionDate) {
        output.WriteRawTag(50);
        output.WriteString(YieldRedemptionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExecId) {
        output.WriteRawTag(10);
        output.WriteString(ExecId);
      }
      if (HasCommissionAndFees) {
        output.WriteRawTag(17);
        output.WriteDouble(CommissionAndFees);
      }
      if (HasCurrency) {
        output.WriteRawTag(26);
        output.WriteString(Currency);
      }
      if (HasRealizedPNL) {
        output.WriteRawTag(33);
        output.WriteDouble(RealizedPNL);
      }
      if (HasBondYield) {
        output.WriteRawTag(41);
        output.WriteDouble(BondYield);
      }
      if (HasYieldRedemptionDate) {
        output.WriteRawTag(50);
        output.WriteString(YieldRedemptionDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasExecId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecId);
      }
      if (HasCommissionAndFees) {
        size += 1 + 8;
      }
      if (HasCurrency) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (HasRealizedPNL) {
        size += 1 + 8;
      }
      if (HasBondYield) {
        size += 1 + 8;
      }
      if (HasYieldRedemptionDate) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(YieldRedemptionDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CommissionAndFeesReport other) {
      if (other == null) {
        return;
      }
      if (other.HasExecId) {
        ExecId = other.ExecId;
      }
      if (other.HasCommissionAndFees) {
        CommissionAndFees = other.CommissionAndFees;
      }
      if (other.HasCurrency) {
        Currency = other.Currency;
      }
      if (other.HasRealizedPNL) {
        RealizedPNL = other.RealizedPNL;
      }
      if (other.HasBondYield) {
        BondYield = other.BondYield;
      }
      if (other.HasYieldRedemptionDate) {
        YieldRedemptionDate = other.YieldRedemptionDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ExecId = input.ReadString();
            break;
          }
          case 17: {
            CommissionAndFees = input.ReadDouble();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 33: {
            RealizedPNL = input.ReadDouble();
            break;
          }
          case 41: {
            BondYield = input.ReadDouble();
            break;
          }
          case 50: {
            YieldRedemptionDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ExecId = input.ReadString();
            break;
          }
          case 17: {
            CommissionAndFees = input.ReadDouble();
            break;
          }
          case 26: {
            Currency = input.ReadString();
            break;
          }
          case 33: {
            RealizedPNL = input.ReadDouble();
            break;
          }
          case 41: {
            BondYield = input.ReadDouble();
            break;
          }
          case 50: {
            YieldRedemptionDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
